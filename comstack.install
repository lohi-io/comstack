<?php
/**
 * @file
 * Provides installation details for Communications Stack.
 */

/**
 * Implements hook_schema().
 */
function comstack_schema() {
  $schema = array();

  $schema['comstack_message_type'] = array(
    'description' => 'Stores information about all defined {comstack_message} types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique {comstack_message} type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this {comstack_message} type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this {comstack_message} type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'structure' => array(
        'description' => 'The structure of this message type, either flat or conversation.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'flat',
      ),
      'conversation_record_separate_transcripts' => array(
        'description' => 'Boolean indicating whether participants of a conversation should have their own histories. Means the {comstack_conversation_message} table is used.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'subject' => array(
        'description' => 'Boolean indicating whether messages of this type should have a subject.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'template' => array(
        'description' => 'Boolean indicating whether the messages in this type use a template, if not then the message is free text.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'template_text' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'The text to use for the message template, follows t() function conventions.',
      ),
      'user_preferences' => array(
        'description' => 'Boolean indicating whether users can set preferences as to what send methods they want to receive messages by.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'flood_control' => array(
        'description' => 'Boolean indicating whether this messages type has flood controls active.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'flood_control_interval' => array(
        'description' => 'Timespan which applies to the limit.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 3600,
      ),
      'flood_control_limit' => array(
        'description' => 'Number of messages of this type that can be sent within the time interval.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 50,
      ),
      'store_last_read_time' => array(
        'description' => 'Boolean indicating whether the messages in this type should record time last read.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'record_read_receipts' => array(
        'description' => 'Boolean indicating whether the messages in this type should have read receipts kept.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'record_read_receipts_perm' => array(
        'description' => 'Boolean indicating whether this type should provide a permission around read receipts.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'record_read_receipts_default' => array(
        'description' => 'Boolean indicating whether this type should provide a permission around read receipts.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'input_methods' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of allowed input methods for this type.',
      ),
      'delivery_methods' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of allowed delivery methods for this type.',
      ),
      'ui_settings' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of allowed UI settings for this type.',
      ),
      'notification_settings' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of allowed notification settings for this type.',
      ),
      'grouping' => array(
        'description' => 'Boolean indicating whether the messages in this type can be grouped together, e.g. Notifications with the groups: Photo, Note, Comment reply.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'groups' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of allowed groups for this type.',
      ),
      'actions' => array(
        'description' => 'Boolean indicating whether messages of this type can have actions defined for them per message.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
    ),
    'unique keys' => array(
      'type' => array('type'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_schema_alter().
 */
function comstack_schema_alter(&$schema) {
  // Add field to existing schema.
  $schema['message']['fields']['actions'] = array(
    'type' => 'text',
    'not null' => FALSE,
    'size' => 'big',
    'serialize' => TRUE,
    'description' => 'A serialized array of actions to perform if allowed by the type.',
  );
  $schema['message']['fields']['deleted'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
    'boolean' => TRUE,
    'description' => 'Boolean to store whether or not this message has been deleted.',
  );
  $schema['message']['fields']['read'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
    'boolean' => TRUE,
    'description' => 'Boolean to store if this message has been read for simple use cases.',
  );
}

/**
 * Implements hook_install().
 */
function comstack_install() {
  // Alter the message table.
  if (!db_field_exists('message', 'actions')) {
    $schema = drupal_get_schema('message');
    db_add_field('message', 'actions', $schema['fields']['actions']);
    db_add_field('message', 'deleted', $schema['fields']['deleted']);
    db_add_field('message', 'read', $schema['fields']['read']);
  }
}

/**
 * Implements hook_uninstall().
 */
function comstack_uninstall() {
  // Remove the fields we've added to {message}.
  if (db_field_exists('message', 'actions')) {
    db_drop_field('message', 'actions');
    db_drop_field('message', 'deleted');
    db_drop_field('message', 'read');
  }
}
