<?php
/**
 * @file
 * comstack.module
 */

/**
 * Flat messages don't belong to a thread/conversation.
 */
define('COMSTACK_TYPE_STRUCTURE_FLAT', 'flat');

/**
 * Messages that do belong to a conversation, part of a dialogue.
 */
define('COMSTACK_TYPE_STRUCTURE_CONVERSATION', 'conversation');

// Drupal lives for arrays, I bring order via includes.
include_once __DIR__ . '/includes/comstack.drush.inc';
include_once __DIR__ . '/includes/comstack.entity.inc';
include_once __DIR__ . '/includes/comstack.forms.inc';
include_once __DIR__ . '/includes/comstack.comstack.inc';

/**
 * Implements hook_permission().
 */
function comstack_permission() {
  $permissions = array(
    'administer comstack settings' => array(
      'title' => t('Administer Communications stack settings'),
      'description' => t('General permission for altering stack settings, does not include bypass access control permission.'),
      'restrict access' => TRUE,
    ),
    'administer comstack message_types' => array(
      'title' => t('Administer message types'),
      'description' => t('Allows users to create, edit and delete Message types (bundles).'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function comstack_menu() {
  $items = array();
  $includes_dir = drupal_get_path('module', 'comstack') . '/includes';

  // Administration menu items.
  $items['admin/structure/comstack'] = array(
    'title' => 'Communications Stack',
    'description' => 'Manage the Communications Stack.',
    'access arguments' => array('administer comstack settings'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => -10,
  );

  $items['admin/structure/comstack/types/settings'] = array(
    'title' => 'Settings',
    'description' => 'General settings for Comstack.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comstack_admin_settings_form'),
    'access arguments' => array('administer comstack settings'),
    // Normally 'file' and 'file_path' would be defined here but we require
    // that file at the top of this module file so no need.
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function comstack_ctools_plugin_type() {
  return array(
    'input_methods' => array(
      'use hooks' => TRUE,
    ),
    'ui' => array(
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function comstack_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'comstack' && in_array($plugin_type, array('input_methods', 'ui'))) {
    return "plugins/$plugin_type";
  }
  elseif ($owner == 'entityreference') {
    return 'plugins/entityreference/' . $plugin_type;
  }
}

/* Base functions for messing with Comstack ctools plugins. */

/**
 * Get Comstack plugins of a specific type.
 */
function comstack_get_plugins($type) {
  $types = &drupal_static(__FUNCTION__);

  if (!isset($types[$type])) {
    $types[$type] = array();

    ctools_include('context');
    ctools_include('plugins');
    $plugins = ctools_get_plugins('comstack', $type);

    // Sort em.
    if ($plugins) {
      uasort($plugins, function($a, $b) {
        return $a['weight'] - $b['weight'];
      });
    }

    $types[$type] = $plugins;
  }

  return $types[$type];
}

/**
 * Get a plugin type as a flat array.
 */
function comstack_get_plugins_flat($type) {
  $types = comstack_get_plugins($type);
  $types_flat = array();

  if (!empty($types)) {
    foreach ($types as $id => $plugin) {
      $types_flat[$id] = $plugin['title'];
    }
  }

  return $types_flat;
}

/**
 * Grab all available input methods.
 */
function comstack_get_input_methods() {
  return comstack_get_plugins('input_methods');
}

/**
 * Grab an array of input_methods with id as the index and label as the value.
 */
function comstack_get_input_methods_flat() {
  return comstack_get_plugins_flat('input_methods');
}

/**
 * Function to grab all available user interfaces.
 */
function comstack_get_uis() {
  return comstack_get_plugins('ui');
}

/**
 * Grab an array of user interfaces with id as the index and label as the
 * value.
 */
function comstack_get_uis_flat() {
  return comstack_get_plugins_flat('ui');
}

/**
* The functions comstack_get_message_types() and
* comstack_get_message_types_flat() can be found in
* includes/comstack.entity.inc.
*/

/**
 * Implements hook_image_default_styles().
 */
function comstack_image_default_styles() {
  $styles = array();

  $styles['comstack-200-200'] = array(
    'label' => 'comstack-200-200',
    'effects' => array(
      1 => array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 200,
          'height' => 200,
        ),
        'weight' => 1,
      ),
    ),
  );

  return $styles;
}
